-- A program is 0 or more imports followed by 
-- zero or more function declarations
PImports.		Program 		::= Import ";" Program ;
PFuncs.			Program1		::= Declaration Program1 ;
PLast.			Program1		::= Declaration ;
coercions Program 1 ;

-- A declaration of function definitions, imports or algebraic data types
DImport.		Import 			::= "import" Id ;
DFunc.			Declaration		::= "function" Id ":" TypeDecls ";" [Def] ;
terminator nonempty Def ";" ;
--Test.			Declaration     ::= "test" LiTypeId ";" ;   --DOES NOT WORK!!! For testing of TypeLId
DData1.			Declaration		::= "datatype" Type [Id] ":=" DataTypes ;
separator Id "" ;

-- The structure of non-linear algebraic data types
DDTypes1.		DataTypes		::= DPatterns ";" ;
DDTypes2.		DataTypes		::= DPatterns "|" DataTypes ;

-- The structure of non-linear algebraic data types
DDTypes4.		DPatterns		::= Type [Id] ;
DDTypes5.		DPatterns		::= Type [Id] DPatterns ;
DDTypes6.		DPatterns		::= "(" Type [Id] ")" DPatterns ;
DDTypes7.		DPatterns		::= "(" Type [Id] ")" ;

-- Function definition
DDef.			Def 			::= Id [Arg] ":=" Exp ;
DGuardsDef.		Def 			::= Id [Arg] Guards ;
separator Arg "" ;

-- Arguments in function definitions can be either a literal,
-- identifier, type (linear or non-linear), list pattern or a tuple
DArg1.			Arg 			::= Literal ;
DArg2.			Arg 			::= Id ;
DArg3.			Arg 			::= Type ;
DArg4.			Arg 			::= ListPattern ;
DArg5.			Arg 			::= Tuple ;

-- Structure of guards in function definitions
DGuards1.		Guards			::= ":=" Exp "when" Exp Guards1 ;
DGuards2.		Guards1			::= ":=" Exp "when" Exp Guards1 ;
DExpGuard.		Guards1			::= ":=" Exp ;
DEmptyGuard.	Guards1			::= ;

-- Pattern matching for lists in function definition arguments
LPattern1.		ListPattern 	::= "[]" ;
LPattern2.		ListPattern 	::= "(" Id ":" Pattern ")" ;
LPattern3.		ListPattern 	::= "(" "_" ":" Pattern ")" ;
LPattern4.		Pattern 		::= "[]" ;
LPattern5.		Pattern 		::= "_" ;
LPattern6.		Pattern 		::= Id ;
LPattern7.		Pattern 		::= Id ":" Pattern ;

-- A literal can be any predefined token type
LitInt.			Literal  		::= Integer ;
LitDouble.		Literal 		::= Double ;
LitChar.		Literal 		::= Char ;
LitString.		Literal 		::= [String] ;
separator nonempty String "" ;

-- Tailor-made token type for identifiers
token Id (lower (letter | digit | '_' | '\'')*) ;

-- Tailor-made token type for list comprehensions
--token ListCompId ('_' | (lower (letter | digit | '_' | '\'')*)) ;  -- WHY NOT WORK!??

-- Tailor-made token types for type identifiers
token TypeId (upper (letter | digit | '_' | '\'')*) ;
token LiTypeId ('i' (upper (letter | digit | '_' | '\'')*)) ;  -- WHY NOT WORK!??

Pwild.			Pat				::= "_" ;
PId.			Pat				::= Id ;

-- Expression types
EVar.			Exp10			::= Id ;
EType.			Exp10			::= Type ;
ELiteral.		Exp10			::= Literal ;
ETuple.			Exp10			::= Tuple ;
EListComp.		Exp10			::= "[" Exp "|" LCPatterns "]" ;
EList.			Exp10			::= "[" [Exp] "]" ;
separator Exp "," ;
EApp.			Exp9			::= Exp9 Exp10 ;
EPow.			Exp8			::= Exp8 "**" Exp9 ;
EMul.			Exp7			::= Exp7 "*" Exp8 ;
EDiv. 			Exp7			::= Exp7 "/" Exp8 ;
EAdd.			Exp6			::= Exp6 "+" Exp7 ;
ESub.			Exp6			::= Exp6 "-" Exp7 ;
ELt. 			Exp5			::= Exp5 "<" Exp6 ;
EGt.			Exp5			::= Exp5 ">" Exp6 ;
ELEQ.			Exp5			::= Exp5 "<=" Exp6 ;
EGEQ.			Exp5			::= Exp5 ">=" Exp6 ;
EEQ.			Exp4			::= Exp4 "==" Exp5 ;
ENEQ.			Exp4			::= Exp4 "!=" Exp5 ;
EAND.			Exp3			::= Exp3 "&&" Exp4 ;
EOR.			Exp2			::= Exp2 "||" Exp3 ;
EAbs.			Exp1			::= "\\" Id "->" Exp ;
coercions Exp 10 ;

-- Structure of list comprehensions input set(s) and predicates
ELCPatterns1.	LCPatterns		::= Pat "<-" Id ;
ELCPatterns2.	LCPatterns		::= Pat "<-" Id "," LCPatterns ;
ELCPatterns3.	LCPatterns		::= Pat "<-" Id "," Predicate ;
ELCPatterns4.	LCPatterns		::= Pat "<-" "[" [Literal] "]" ;
ELCPatterns5.	LCPatterns		::= Pat "<-" "[" [Literal] "]" "," LCPatterns ;
ELCPatterns6.	LCPatterns		::= Pat "<-" "[" [Literal] "]" "," Predicate ;
separator nonempty Literal "," ;
LCPredicate.	Predicate		::= Exp ;
LCPredicates.	Predicate		::= Exp "," Predicate ;

-- The structure of type declarations for functions.
TypeDecl.		TypeDecls		::= NLiTDPat ;
LiTypeDecl.		TypeDecls		::= LiTDPat ;
LSTypeDecl.		TypeDecls		::= "[" NLiTDPat "]" ;
LSLiTypeDecl.	TypeDecls		::= "[" LiTDPat "]" ;
MTypeDecl.		TypeDecls		::= NLiTDPat "->" TypeDecls ;
MLiTypeDecl.	TypeDecls		::= LiTDPat "-o" TypeDecls ;
LMTypeDecl.		TypeDecls		::= "[" NLiTDPat "]" "->" TypeDecls ;
LMLiTypeDecl.	TypeDecls		::= "[" LiTDPat "]" "-o" TypeDecls ;

-- Non-linear inputs for type declarations of functions.
NLiTDPat1.		NLiTDPat		::= Id ;
NLiTDPat2.		NLiTDPat		::= TypeId ;
NLiTDPat3.		NLiTDPat		::= Tuple ;

-- Linear inputs for type declarations of functions.
LiTDPat1.		LiTDPat			::= LiTypeId ;

-- All the possible permutations for regular tuples that can be either 
-- of size 2 or 3, with possible nested tuples. Regular tuples cannot
-- contain linear elements.
TupleDef1.			Tuple		::= "(" TupleArgs "," TupleArgs ")" ;
TupleDef2.			Tuple		::= "(" Tuple "," TupleArgs ")" ;
TupleDef3.			Tuple		::= "(" TupleArgs "," Tuple ")" ;
TupleDef4.			Tuple		::= "(" Tuple "," Tuple ")" ;
TupleDef5.			Tuple		::= "(" TupleArgs "," TupleArgs "," TupleArgs ")" ;
TupleDef6.			Tuple		::= "(" Tuple "," TupleArgs "," TupleArgs ")" ;
TupleDef7.			Tuple		::= "(" TupleArgs "," Tuple "," TupleArgs ")" ;
TupleDef9.			Tuple		::= "(" TupleArgs "," TupleArgs "," Tuple ")" ;
TupleDef10.			Tuple		::= "(" Tuple "," Tuple "," TupleArgs ")" ;
TupleDef11.			Tuple		::= "(" TupleArgs "," Tuple "," Tuple ")" ;
TupleDef12.			Tuple		::= "(" Tuple "," TupleArgs "," Tuple ")" ;
TupleDef13.			Tuple		::= "(" Tuple "," Tuple "," Tuple ")" ;

-- Tuple arguments
TupleArgs1.			TupleArgs	::= Id ;
TupleArgs2.			TupleArgs	::= Literal ;
TupleArgs3.			TupleArgs	::= TypeId ;



-- Ideas for Tuples:
--TTuple.		Tuple 		::= "(" [TuplePattern] ")" ;
--separator nonempty TuplePattern "," ;
--TPatternDef1.	TuplePattern	::= Id ;
--TPatternDef2.	TuplePattern	::= Literal ;
--TPatternDef3.	TuplePattern	::= TypeId ;
--TPatternDef4.	TuplePattern	::= Tuple ;


--TTuple.		Tuple 		::= "(" TuplePatterns ")" ;
--TPatternDef1.	TuplePatterns	::= TupleArgs ;
--TPatternDef2.	TuplePatterns	::= Tuple ;
--TPatternDef3.	TuplePatterns	::= TupleArgs "," TuplePatterns ;
--TPatternDef4.	TuplePatterns	::= Tuple "," TuplePatterns ;


-- Types, either regular or linear
TTypeId.			Type		::= TypeId ;
TLiTypeId.			Type		::= LiTypeId ;

-- Haskell-style comments for now
comment "--" ;
comment "{-" "-}" ;