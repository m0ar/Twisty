-- A program is a 0 or more imports followed by 
-- zero or more function declarations
PImports.   Program     ::= Import ";" Program ;
PFuncs.     Program1    ::= Func Program1 ;
PLast.      Program1    ::= Func ;
coercions   Program 1 ;

-- A declaration is a list of function definitions
DFunc.      Func        ::= "function" Id ":" Types ";" [Def] ;
DImport.    Import      ::= "import" Id ;
terminator  nonempty Def ";" ;

-- Function definition
DDef.       Def         ::= Id [Arg] ":=" Exp ;
separator   Arg "" ;

-- Arguments can be either a literal, identifier or a list pattern
DArg1.      Arg         ::= Literal ;
DArg2.      Arg         ::= Id ;
DArg3.      Arg         ::= ListPattern ;

-- Pattern matching for lists
LPattern1.  ListPattern ::= "[]";
LPattern2.  ListPattern ::= "(" Id ":" Pattern ")";
LPattern3.  Pattern     ::= "[]" ;
LPattern4.  Pattern     ::= Id ;
LPattern5.  Pattern     ::= Id ":" Pattern ;


-- Predefined token types
LitInt.     Literal     ::= Integer ;
LitDouble.  Literal     ::= Double ;
LitChar.    Literal     ::= Char ;
LitString.  Literal     ::= [String] ;
separator nonempty String "" ;

-- Tailor-made token type
token Id (lower (letter | digit | '_' | '\'')*) ;

-- Expression types
EVar.       Exp10       ::= Id ;
ELiteral.   Exp10       ::= Literal ;
EApp.       Exp9        ::= Exp9 Exp10 ;
EPow.       Exp8        ::= Exp8 "**" Exp9 ;
EMul.       Exp7        ::= Exp7 "*" Exp8 ;
EDiv.       Exp7        ::= Exp7 "/" Exp8 ;
EAdd.       Exp6        ::= Exp6 "+" Exp7 ;
ESub.       Exp6        ::= Exp6 "-" Exp7 ;
ELt.        Exp5        ::= Exp5 "<" Exp6 ;
EGt.        Exp5        ::= Exp5 ">" Exp6 ;
ELEQ.       Exp5        ::= Exp5 "<=" Exp6 ;
EGEQ.       Exp5        ::= Exp5 ">=" Exp6 ;
EEQ.        Exp4        ::= Exp4 "==" Exp5 ;
ENEQ.       Exp4        ::= Exp4 "!=" Exp5 ;
EAND.       Exp3        ::= Exp3 "&&" Exp4 ;
EOR.        Exp2        ::= Exp2 "||" Exp3 ;
EAbs.       Exp1        ::= "\\" Id "->" Exp ;
coercions Exp 10 ;

-- Single or multiple argument type declarations
SType.      Types       ::= Type ;
AType.      Types       ::= Type "->" Types ;
LType.      Types       ::= LType "-o" Types ;

-- Standard types
TBool.      Type        ::= "Bool" ;
TInt.       Type        ::= "Int" ;
TNat.       Type        ::= "Nat"
TDouble.    Type        ::= "Double" ;
TChar.      Type        ::= "Char" ;
TString.    Type        ::= "String" ;

--Linear types
TLBool.     LType       ::= "iBool" ;
TLInt.      LType       ::= "iInt" ;
TLNat.      LType       ::= "iNat"
TLDouble.   LType       ::= "iDouble" ;
TLChar.     LType       ::= "iChar" ;
TLString.   LType       ::= "iString" ;

-- Haskell-style comments for now
comment "--" ;
comment "{-" "-}" ;
