-- A program is just a list of declarations
PDecl.      Program     ::= [Declaration] ;
terminator  Declaration "" ;

-- A declaration is a list of function definitions
DFunc.      Declaration ::= Id ":" Types ";" [Def] ;
terminator  Def ";" ;

-- Function definition
DDef.       Def         ::= Id [Arg] ":=" Exp ;
separator   Arg "" ;

-- Arguments can be either a literal or an identifier
DArg1.      Arg         ::= Literal ;
DArg2.      Arg         ::= Id ;

-- Predefined token types
LitInt.     Literal     ::= Integer ;
LitDouble.  Literal     ::= Double ;
LitChar.    Literal     ::= Char ;
LitString.  Literal     ::= [String] ;
separator nonempty String "" ;

-- Tailor-made token type
token Id (letter (letter | digit | '_')*) ;

-- Expression types
ELiteral.   Exp2        ::= Literal ;
EApp.       Exp1        ::= Exp Exp ;
EAbs.       Exp1        ::= "\\" Id "->" Exp ;
coercions Exp 2 ;

-- Single or multiple argument type declarations
SType.      Types       ::= Type ;
AType.      Types       ::= Type "->" Types ;

-- Standard types
Tbool.      Type        ::= "Bool" ;
Tint.       Type        ::= "Int" ;

-- Haskell-style comments for now
comment "--" ;
comment "{-" "-}" ;
