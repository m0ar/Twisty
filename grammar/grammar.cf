-- A program is 0 or more imports followed by 
-- zero or more function declarations
PImports.   Program         ::= Import ";" Program ;
PFuncs.     Program1        ::= Declaration Program1 ;
PLast.      Program1        ::= Declaration ;
coercions   Program 1 ;

-- A declaration of function definitions, imports or algebraic data types
DImport.    Import          ::= "import" Id ;
DFunc.      Declaration     ::= "function" Id ":" Types ";" [Def] ;
terminator  nonempty Def ";" ;
DData1.     Declaration     ::= "datatype" Type [Id] ":=" NLDataTypes ;
DData2.     Declaration     ::= "datatype" LType [Id] ":=" LDataTypes ;
separator   Id "" ;

-- The structure of non-linear algebraic data types
DDTypes1.   NLDataTypes     ::= NLDPatterns ";" ;
DDTypes2.   NLDataTypes     ::= NLDPatterns "|" NLDataTypes ;

-- The structure of non-linear algebraic data types
DDTypes4.   NLDPatterns     ::= Type [Id] ;
DDTypes5.   NLDPatterns     ::= Type [Id] NLDPatterns ;
DDTypes6.   NLDPatterns     ::= "(" Type [Id] ")" NLDPatterns ;
DDTypes7.   NLDPatterns     ::= "(" Type [Id] ")" ;


-- The structure of linear algebraic data types
DDTypes8.    LDataTypes     ::= LDPatterns ";" ;
DDTypes9.    LDataTypes     ::= NLDPatterns ";" ;
DDTypes10.   LDataTypes     ::= LDPatterns "|" LDataTypes ;
DDTypes11.   LDataTypes     ::= NLDPatterns "|" LDataTypes ;

-- The structure of linear algebraic data types
DDTypes12.   LDPatterns     ::= LType [Id] ;
DDTypes13.   LDPatterns     ::= LType [Id] LDPatterns ;
DDTypes14.   LDPatterns     ::= "(" LType [Id] ")" LDPatterns ;
DDTypes15.   LDPatterns     ::= "(" LType [Id] ")" ;


-- Function definition
DDef.       Def             ::= Id [Arg] ":=" Exp ;
separator   Arg "" ;

-- Arguments can be either a literal, identifier or a list pattern
DArg1.      Arg             ::= Literal ;
DArg2.      Arg             ::= Id ;
DArg3.      Arg             ::= ListPattern ;

-- Pattern matching for lists
LPattern1.  ListPattern     ::= "[]";
LPattern2.  ListPattern     ::= "(" Id ":" Pattern ")";
LPattern3.  Pattern         ::= "[]" ;
LPattern4.  Pattern         ::= Id ;
LPattern5.  Pattern         ::= Id ":" Pattern ;


-- Predefined token types
LitInt.     Literal         ::= Integer ;
LitDouble.  Literal         ::= Double ;
LitChar.    Literal         ::= Char ;
LitString.  Literal         ::= [String] ;
separator nonempty String "" ;

-- Tailor-made token type for identifiers
token Id (lower (letter | digit | '_' | '\'')*) ;

-- Tailor-made token types for type identifiers
token TypeId (upper (letter | digit | '_' | '\'')*) ;
token TypeLId ('i' (upper (letter | digit | '_' | '\'')*)) ;

-- Expression types
EVar.       Exp10           ::= Id ;
ELiteral.   Exp10           ::= Literal ;
EApp.       Exp9            ::= Exp9 Exp10 ;
EPow.       Exp8            ::= Exp8 "**" Exp9 ;
EMul.       Exp7            ::= Exp7 "*" Exp8 ;
EDiv.       Exp7            ::= Exp7 "/" Exp8 ;
EAdd.       Exp6            ::= Exp6 "+" Exp7 ;
ESub.       Exp6            ::= Exp6 "-" Exp7 ;
ELt.        Exp5            ::= Exp5 "<" Exp6 ;
EGt.        Exp5            ::= Exp5 ">" Exp6 ;
ELEQ.       Exp5            ::= Exp5 "<=" Exp6 ;
EGEQ.       Exp5            ::= Exp5 ">=" Exp6 ;
EEQ.        Exp4            ::= Exp4 "==" Exp5 ;
ENEQ.       Exp4            ::= Exp4 "!=" Exp5 ;
EAND.       Exp3            ::= Exp3 "&&" Exp4 ;
EOR.        Exp2            ::= Exp2 "||" Exp3 ;
EAbs.       Exp1            ::= "\\" Id "->" Exp ;
coercions Exp 10 ;

-- Single or multiple argument type declarations for functions
SType.      Types           ::= TypeId ;
SLiType.    Types           ::= TypeLId ;
AType.      Types           ::= TypeId "->" Types ;
LiType.     Types           ::= TypeLId "-o" Types ;

-- Types
TId.        Type            ::= TypeId ;
TLId.       LType           ::= TypeLId ;

-- Haskell-style comments for now
comment "--" ;
comment "{-" "-}" ;
