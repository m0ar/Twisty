-- A program is 0 or more imports followed by 
-- zero or more function declarations
PImports.		Program 		::= Import ";" Program ;
PFuncs.			Program1		::= Declaration Program1 ;
PLast.			Program1		::= Declaration ;
coercions Program 1 ;

-- A declaration of function definitions, imports or algebraic data types
DImport.		Import 			::= "import" Id ;
DFunc.			Declaration		::= "function" Id ":" TypeDecls ";" [Def] ;
DData.			Declaration		::= "datatype" Type [Id] ":=" DataTypes Deriving ;
DSyn.			Declaration		::= "type" Type [Id] ":=" DataTypes Deriving ;

-- The structure of type declarations for functions.
STypeDecl.		TypeDecls		::= TDParam ;
LSTypeDecl.		TypeDecls		::= "[" TDParam "]" ;
MTypeDecl.		TypeDecls		::= TDParam "->" TypeDecls ;
MLiTypeDecl.	TypeDecls		::= TDParam "-o" TypeDecls ;
MLTypeDecl.		TypeDecls		::= "[" TDParam "]" "->" TypeDecls ;
MLiLTypeDecl.	TypeDecls		::= "[" TDParam "]" "-o" TypeDecls ;

-- Type parameters for type declarations
TypeDeclParam1.	TDParam			::= Id ;
TypeDeclParam2.	TDParam			::= Type ;
TypeDeclParam3.	TDParam			::= Tuple ;

-- Function definition
DDef.			Def 			::= Id [Arg] ":=" Exp ;
DGuardsDef.		Def 			::= Id [Arg] Guards ;
terminator nonempty Def ";" ;

-- Arguments in function definitions can be either a literal,
-- identifier, type (linear or non-linear), list pattern or a tuple
DArg1.			Arg 			::= Literal ;
DArg2.			Arg 			::= Id ;
DArg3.			Arg 			::= Type ;
DArg4.			Arg 			::= ListPattern ;
DArg5.			Arg 			::= Tuple ;
separator Arg "" ;

-- Structure of guards in function definitions
DGuards1.		Guards			::= ":=" Exp "when" Exp Guards1 ;
DGuards2.		Guards1			::= ":=" Exp "when" Exp Guards1 ;
DExpGuard.		Guards1			::= ":=" Exp ;
DEmptyGuard.	Guards1			::= ;

-- The structure of algebraic data types
DDTypes1.		DataTypes		::= DPatterns ;
DDTypes2.		DataTypes		::= DPatterns "|" DataTypes ;

-- The structure of algebraic data types
DDTypes3.		DPatterns		::= Type [Id] ;
DDTypes4.		DPatterns		::= List ;
DDTypes5.		DPatterns		::= Tuple ;
DDTypes6.		DPatterns		::= Type [Id] DPatterns ;
DDTypes7.		DPatterns		::= List DPatterns ;
DDTypes8.		DPatterns		::= Tuple DPatterns ;

-- Deriving structure
DDeriving1.		Deriving		::= ";" ;
DDeriving2.		Deriving		::= "deriving" "(" [DerArg] ")" ";" ;
separator nonempty DerArg "," ;
DDerArg1.		DerArg			::= "Show" ;
DDerArg2.		DerArg			::= "Read" ;
DDerArg3.		DerArg			::= "Eq" ;
DDerArg4.		DerArg			::= "Ord" ;
DDerArg5.		DerArg			::= "Num" ;
DDerArg6.		DerArg			::= "Integral" ;
DDerArg7.		DerArg			::= "Floating" ;
DDerArg8.		DerArg			::= "Enum" ;
DDerArg9.		DerArg			::= "Bounded" ;

-- Pattern matching for lists in function definition arguments
LPattern1.		ListPattern 	::= "[]" ;
LPattern2.		ListPattern 	::= "(" Pat ":" Pattern ")" ;
LPattern3.		Pattern 		::= "[]" ;
LPattern4.		Pattern 		::= Pat ;
LPattern5.		Pattern 		::= Pat ":" Pattern ;

-- categroy for every case when an underscore or an identifier is accepted
Pwild.			Pat				::= "_" ;
PId.			Pat				::= Id ;
PLit.           Pat             ::= Literal ;

-- A literal can be any predefined token type
LitInt.			Literal  		::= Integer ;
LitDouble.		Literal 		::= Double ;
LitChar.		Literal 		::= Char ;
LitString.		Literal 		::= String ;

-- Tailor-made token type for identifiers
token Id (lower (letter | digit | '_' | '\'')*) ;
separator Id "" ;

-- Tailor-made token types for type identifiers
token TypeId (upper (letter | digit | '_' | '\'')*) ;
token LiTypeId ('i' (upper (letter | digit | '_' | '\'')*)) ;  -- WHY NOT WORK!??

-- Expression types
EVar.			Exp10			::= Id ;
EType.			Exp10			::= Type ;
ELiteral.		Exp10			::= Literal ;
ETrue.          Exp10           ::= "true" ;
EFalse.         Exp10           ::= "false" ;
ETuple.			Exp10			::= Tuple ;
EListComp.		Exp10			::= "[" Exp "|" LCPatterns "]" ;
EList.			Exp10			::= List ;
ELet.			Exp10			::= LetBinding ;
EApp.			Exp9			::= Exp9 Exp10 ;
EPow.			Exp8			::= Exp8 "^" Exp9 ;
EMul.			Exp7			::= Exp7 "*" Exp8 ;
EDiv. 			Exp7			::= Exp7 "/" Exp8 ;
EAdd.			Exp6			::= Exp6 "+" Exp7 ;
ESub.			Exp6			::= Exp6 "-" Exp7 ;
ELt. 			Exp5			::= Exp5 "<" Exp6 ;
EGt.			Exp5			::= Exp5 ">" Exp6 ;
ELEQ.			Exp5			::= Exp5 "<=" Exp6 ;
EGEQ.			Exp5			::= Exp5 ">=" Exp6 ;
EEQ.			Exp4			::= Exp4 "==" Exp5 ;
ENEQ.			Exp4			::= Exp4 "!=" Exp5 ;
EAND.			Exp3			::= Exp3 "&&" Exp4 ;
EOR.			Exp2			::= Exp2 "||" Exp3 ;
ECase.          Exp1            ::= "case" Exp "of" Cases ;
EIf.            Exp1            ::= "if" Exp2 "then" Exp2 "else" Exp ;
EAbs.			Exp1			::= "\\" Id "->" Exp ;
coercions Exp 10 ;
separator Exp "," ;

ECases1.		Cases			::= CArg "->" Exp ";" Cases1 ;
ECases2.		Cases1			::= CArg "->" Exp ";" Cases1 ;
ECases3.		Cases1			::= ;

CCArg1.			CArg			::= Pat ;
CCArg2.			CArg			::= ListPattern ;
CCArg3.			CArg			::= Tuple ;

--PatCase.        Case           ::= Pat "->" Exp ;
--PatList.        Case           ::= ListPattern "->" Exp ;
--PatTuple.       Case           ::= Tuple "->" Exp ;
--separator Case ";" ;


--DGuardsDef.		Def 			::= Id [Arg] Guards ;
-- Structure of guards in function definitions
--DGuards1.		Guards			::= ":=" Exp "when" Exp Guards1 ;
--DGuards2.		Guards1			::= ":=" Exp "when" Exp Guards1 ;
--DExpGuard.		Guards1			::= ":=" Exp ;
--DEmptyGuard.	Guards1			::= ;

-- Structure of list comprehensions input set(s) and predicates.
-- The elements drawn from the input set are either bound 
-- to an identifier or a wild-card.
ELCPatterns1.	LCPatterns		::= Pat "<-" Id ;
ELCPatterns2.	LCPatterns		::= Pat "<-" Id "," LCPatterns ;
ELCPatterns3.	LCPatterns		::= Pat "<-" Id "," Predicate ;
ELCPatterns4.	LCPatterns		::= Pat "<-" "[" [Literal] "]" ;
ELCPatterns5.	LCPatterns		::= Pat "<-" "[" [Literal] "]" "," LCPatterns ;
ELCPatterns6.	LCPatterns		::= Pat "<-" "[" [Literal] "]" "," Predicate ;
separator nonempty Literal "," ;
LCPredicate.	Predicate		::= Exp ;
LCPredicates.	Predicate		::= Exp "," Predicate ;

-- Let bindings, this is requires an additional ';' at the very end of the binding.
ELetBinding1.	LetBinding		::= "let" [LetBinding1] "in" Exp ";" ;
ELetBinding2.	LetBinding1		::= Id ":=" Exp ;
terminator nonempty LetBinding1 ";" ;

-- Lists
ListDefn.		List			::= "[" [Exp] "]" ;

-- Tuples
TTuple.			Tuple		    ::= "(" [Exp] ")";

-- Types, either regular or linear
TTypeId.		Type		::= TypeId ;
TLiTypeId.		Type		::= LiTypeId ;


-- Haskell-style comments for now
comment "--" ;
comment "{-" "-}" ;